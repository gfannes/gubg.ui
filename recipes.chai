root.book("sfml", fun(b){
    if (false)
    {
        var mods = ["Audio", "Graphics", "Network", "System", "Window"]
        for_each(mods, fun[b](mod){
            b.recipe(mod, fun[mod](r){
                r.add("extern/SFML/src", "SFML/${mod}/*.[hc]pp", Propagation.Private)
                var myos = my(OS)
                var os = "Unknown"
                if (false) {}
                else if (myos == OS.Linux)
                {
                    r.include_path("/usr/include/AL")
                    /* This gives problems with sf::Style::None because None is defined as a macro by X11.h apparently */
                    r.remove("extern/SFML/src", "SFML/Window/Egl*.cpp")
                    os = "Unix"
                }
                else if (myos == OS.MacOS) {os = "OSX"}
                else if (myos == OS.Windows)
                {
                    r.include_path("extern/SFML/extlibs/headers/AL")
                    r.include_path("extern/SFML/extlibs/headers")
                    r.remove("extern/SFML/src", "SFML/Window/EGL*.cpp")
                    r.remove("extern/SFML/src", "SFML/Window/Egl*.cpp")
                    r.define("SFML_STATIC")
                    r.define("UNICODE")
                    r.define("_UNICODE")
                    os = "Win32"
                }
                r.add("extern/SFML/src", "SFML/${mod}/${os}/*.[hc]pp", Propagation.Private)
                r.add("extern/SFML/include", "SFML/${mod}/*.hpp")
                for_each(["stb_image", "freetype2"], fun[r](str){
                    r.include_path("extern/SFML/extlibs/headers/${str}")
                })
            })
        })
        b.recipe("func", TargetType.Archive, fun[mods](r){
            for_each(mods, fun[r](mod){
                r.depends_on(mod)
            })
            var libs
            if (my(OS) == OS.Linux){
                libs = ["xcb", "xcb-randr", "xcb-image", "udev", "jpeg", "GL", "GLU", "Xrandr", "X11", "X11-xcb", "pthread", "openal", "freetype", "EGL"]
            }
            else if (my(OS) == OS.Windows){
                libs = ["winmm", "advapi32", "gdi32", "opengl32", "freetype"]
                r.library_path("${getenv("gubg")}/gubg.ui/extern/SFML/extlibs/libs-msvc/x64")
            }
            for_each(libs, fun[r](lib){
                r.library(lib)
            })
        })
    }
    else
    {
        b.recipe("func", fun(rcp){
            var extra_libs = []
            if (my(OS) == OS.Linux){
                extra_libs = ["xcb", "xcb-randr", "xcb-image", "udev", "jpeg", "GL", "GLU", "Xrandr", "X11", "X11-xcb", "pthread", "openal", "freetype", "EGL"]
            }
            else if (my(OS) == OS.Windows){
                extra_libs = ["winmm", "advapi32", "gdi32", "opengl32", "freetype"]
                rcp.library_path("${getenv("gubg")}/gubg.ui/extern/SFML/extlibs/libs-msvc/x64")
            }

            rcp.library("sfml-graphics")
            rcp.library("sfml-window")
            rcp.library("sfml-system")
            rcp.library("sfml-audio")
            for_each(extra_libs, fun[rcp](lib){
                rcp.library(lib)
            })
        })
    }
})

root.book("imgui", fun(b){
    b.recipe("sfml", fun(r){
        //This could be in a seperate recipe, but some change to cook lost the imconfig-SFML.h force include which is
        //needed to ensure that ImTextureID is typedef-ed as "unsigned int" iso "void *"
        r.add("extern/imgui", "*.cpp")
        r.add("extern/imgui", "*.h")
        r.add("extern/imgui-sfml", "*.cpp")
        r.add("extern/imgui-sfml", "*.h")
        r.add("extern/imgui-sfml", "imconfig-SFML.h", Type.ForceInclude | Language.CXX)
        r.depends_on("sfml/func")
    })
})

root.book("termbox", fun(b){
    b.recipe("func", TargetType.Archive, fun(r){
        r.add("extern/termbox/src", "termbox.c")
        r.add("extern/termbox/src", "utf8.c")
        r.add("extern/termbox/src", "*.h")
    })
})

root.recipe("oof", fun(rcp){
    rcp.add("extern/oof", "oof.h")
})

root.book("gubg/ui", fun(b){
    b.recipe("func", fun(r){
        // oof gives unresolved symbols in release mode: disabled for now
        // r.add("src", "gubg/**.[hc]pp")
        // r.depends_on("gubg/io/func")
        // r.depends_on("sfml/func")
        // r.depends_on("imgui/sfml")
        // r.depends_on("oof")
    })
    b.recipe("ut", fun(r){
        // r.add("test", "sfml/**.cpp")
        // r.depends_on("func")
        // r.depends_on("catch/func")
    })
})
